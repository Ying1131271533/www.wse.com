<?php

// RabbitMQ 消费者 练习
// 注册 在config下的console.php配置文件添加 'consumer' => 'app\command\Consumer'
// 使用 进入项目 www.ruiwen.com/ 然后 php think consumer
namespace app\common\command\swoole;

use app\common\lib\classes\rabbitmq\RabbitMqConnection;
use think\console\Command;
use think\console\Input;
use think\console\Output;
use think\facade\Log;

class TCP extends Command
{
    protected function configure()
    {
        parent::configure(); // TODO: Change the autogenerated stub
        $this->setName('tcp');
    }

    protected function execute(Input $input, Output $output)
    {
        // 创建Server对象，监听 127.0.0.1:9501 端口
        $server = new \Swoole\Server(config('app.swoole.host'), config('app.swoole.port'));

        // 用于设置运行时的各项参数
        $server->set([
            'worker_num'  => 4, // 进程数，最好是cpu核数的1-4倍
            'max_request' => 50, // 最大请求数
        ]);

        // 监听连接进入事件
        // 参数1：回调事件名称，大小写不敏感，事件名称字符串不要加 on
        // 参数2：返回$this自己的function onConnect()
        // $server->on('Connect', [$this, 'onConnect']);
        $server->on('connect', [$this, 'onConnect']);

        // 监听数据接收事件
        $server->on('Receive', [$this, 'onReceive']);

        // 监听连接关闭事件
        $server->on('Close', [$this, 'onClose']);

        //启动服务器
        $server->start(); 
    }

    // 监听连接进入事件
    // 返回参数2：$fd是客户端连接进来的客户端id，就是客户端连接的唯一标识符
    public function onConnect($server, $fd)
    {
        echo "客户端id：{$fd} 正在连接.\n";
    }

    // 监听数据接收事件
    public function onReceive($server, $fd, $reactor_id, $data)
    {
        $server->send($fd, "发送的数据: {$data}");
    }

    // 监听连接关闭事件
    public function onClose($server, $fd)
    {
        echo "客户端id：{$fd} 已关闭连接.\n";
    }

}
